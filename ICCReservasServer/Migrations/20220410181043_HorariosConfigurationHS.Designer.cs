// <auto-generated />
using System;
using Entities.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace ICCReservasServer.Migrations
{
    [DbContext(typeof(ApplicationDataContext))]
    [Migration("20220410181043_HorariosConfigurationHS")]
    partial class HorariosConfigurationHS
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Entities.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("MiddleName")
                        .HasColumnType("text");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecondLastName")
                        .HasColumnType("text");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Entities.Models.Clases", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<int>("HorarioID")
                        .HasColumnType("integer");

                    b.Property<int>("MateriaID")
                        .HasColumnType("integer");

                    b.Property<string>("UserID")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.HasIndex("HorarioID");

                    b.HasIndex("MateriaID");

                    b.HasIndex("UserID");

                    b.ToTable("Clases");
                });

            modelBuilder.Entity("Entities.Models.Dispositivos", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Marca")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Modelo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Serial")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.ToTable("Dispositivos");
                });

            modelBuilder.Entity("Entities.Models.Horarios", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<string>("HoraFin")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("HoraInicio")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Nivel")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Numero")
                        .HasColumnType("integer");

                    b.HasKey("ID");

                    b.ToTable("Horarios", (string)null);

                    b.HasData(
                        new
                        {
                            ID = 1,
                            HoraFin = "08:15:00",
                            HoraInicio = "07:30:00",
                            Nivel = "HS",
                            Numero = 1
                        },
                        new
                        {
                            ID = 2,
                            HoraFin = "09:00:00",
                            HoraInicio = "08:15:00",
                            Nivel = "HS",
                            Numero = 2
                        },
                        new
                        {
                            ID = 3,
                            HoraFin = "10:30:00",
                            HoraInicio = "09:45:00",
                            Nivel = "HS",
                            Numero = 3
                        },
                        new
                        {
                            ID = 4,
                            HoraFin = "11:15:00",
                            HoraInicio = "10:30:00",
                            Nivel = "HS",
                            Numero = 4
                        },
                        new
                        {
                            ID = 5,
                            HoraFin = "12:00:00",
                            HoraInicio = "11:15:00",
                            Nivel = "HS",
                            Numero = 5
                        },
                        new
                        {
                            ID = 6,
                            HoraFin = "13:15:00",
                            HoraInicio = "12:30:00",
                            Nivel = "HS",
                            Numero = 6
                        },
                        new
                        {
                            ID = 7,
                            HoraFin = "14:00:00",
                            HoraInicio = "13:15:00",
                            Nivel = "HS",
                            Numero = 7
                        });
                });

            modelBuilder.Entity("Entities.Models.Instalaciones", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<int>("Capacidad")
                        .HasColumnType("integer");

                    b.Property<string>("Codigo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Edificio")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Piso")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.ToTable("Instalaciones", (string)null);

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Capacidad = 0,
                            Codigo = "HS-S-1",
                            Descripcion = "Deposito 1 en el sotano.",
                            Edificio = "HS",
                            Nombre = "Deposito 1",
                            Piso = "S",
                            Status = 0,
                            Tipo = "Deposito"
                        },
                        new
                        {
                            ID = 2,
                            Capacidad = 15,
                            Codigo = "HS-S-2",
                            Descripcion = "Salón de Ciencias de la Tierra",
                            Edificio = "HS",
                            Nombre = "Ciencias de la Tierra",
                            Piso = "S",
                            Status = 1,
                            Tipo = "Aula"
                        },
                        new
                        {
                            ID = 3,
                            Capacidad = 15,
                            Codigo = "HS-S-3",
                            Descripcion = "Salón de Dibujo Técnico",
                            Edificio = "HS",
                            Nombre = "Dibujo Técnico",
                            Piso = "S",
                            Status = 1,
                            Tipo = "Aula"
                        },
                        new
                        {
                            ID = 4,
                            Capacidad = 0,
                            Codigo = "HS-S-4",
                            Descripcion = "Deposito 2 en el sotano.",
                            Edificio = "HS",
                            Nombre = "Deposito 2",
                            Piso = "S",
                            Status = 0,
                            Tipo = "Deposito"
                        },
                        new
                        {
                            ID = 5,
                            Capacidad = 20,
                            Codigo = "HS-S-5",
                            Descripcion = "Laboratorio de Biología (Salón 2)",
                            Edificio = "HS",
                            Nombre = "Laboratorio de Biología (Salón 2)",
                            Piso = "S",
                            Status = 1,
                            Tipo = "Laboratorio"
                        },
                        new
                        {
                            ID = 6,
                            Capacidad = 20,
                            Codigo = "HS-S-6",
                            Descripcion = "Laboratorio de Física (Salón 2)",
                            Edificio = "HS",
                            Nombre = "Laboratorio de Física",
                            Piso = "S",
                            Status = 1,
                            Tipo = "Laboratorio"
                        },
                        new
                        {
                            ID = 7,
                            Capacidad = 20,
                            Codigo = "HS-S-7",
                            Descripcion = "Laboratorio de Química (Salón 2)",
                            Edificio = "HS",
                            Nombre = "Laboratorio de Química",
                            Piso = "S",
                            Status = 1,
                            Tipo = "Laboratorio"
                        },
                        new
                        {
                            ID = 8,
                            Capacidad = 20,
                            Codigo = "HS-S-8",
                            Descripcion = "Laboratorio de Biología (Salón 1)",
                            Edificio = "HS",
                            Nombre = "Laboratorio de Biología (Salón 1)",
                            Piso = "S",
                            Status = 1,
                            Tipo = "Laboratorio"
                        },
                        new
                        {
                            ID = 9,
                            Capacidad = 20,
                            Codigo = "HS-1-1",
                            Descripcion = "Salón 2 de Humanidades/Tutoría",
                            Edificio = "HS",
                            Nombre = "Humanidades/Tutoría Salón 2",
                            Piso = "1",
                            Status = 1,
                            Tipo = "Aula"
                        },
                        new
                        {
                            ID = 10,
                            Capacidad = 25,
                            Codigo = "HS-1-2",
                            Descripcion = "Salón 1 de Humanidades/Tutoría",
                            Edificio = "HS",
                            Nombre = "Humanidades/Tutoría Salón 1",
                            Piso = "1",
                            Status = 1,
                            Tipo = "Aula"
                        },
                        new
                        {
                            ID = 11,
                            Capacidad = 20,
                            Codigo = "HS-1-3",
                            Descripcion = "Sala de estudios",
                            Edificio = "HS",
                            Nombre = "Study Hall",
                            Piso = "1",
                            Status = 1,
                            Tipo = "Aula"
                        },
                        new
                        {
                            ID = 12,
                            Capacidad = 25,
                            Codigo = "HS-1-4",
                            Descripcion = "Salón de Ciencias Sociales",
                            Edificio = "HS",
                            Nombre = "Ciencias Sociales",
                            Piso = "1",
                            Status = 1,
                            Tipo = "Aula"
                        },
                        new
                        {
                            ID = 13,
                            Capacidad = 25,
                            Codigo = "HS-1-5",
                            Descripcion = "Salón 1 de Química",
                            Edificio = "HS",
                            Nombre = "Química Salon 1",
                            Piso = "1",
                            Status = 1,
                            Tipo = "Aula"
                        },
                        new
                        {
                            ID = 14,
                            Capacidad = 25,
                            Codigo = "HS-1-6",
                            Descripcion = "Salón de Catholic Leadership Change Makers",
                            Edificio = "HS",
                            Nombre = "Catholic Leadership Change Makers",
                            Piso = "1",
                            Status = 1,
                            Tipo = "Aula"
                        },
                        new
                        {
                            ID = 15,
                            Capacidad = 3,
                            Codigo = "HS-1-7",
                            Descripcion = "Oficina Directiva 1",
                            Edificio = "HS",
                            Nombre = "Oficina Directiva 1",
                            Piso = "1",
                            Status = 1,
                            Tipo = "Oficina"
                        });
                });

            modelBuilder.Entity("Entities.Models.Materias", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<string>("Codigo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Grado")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Nivel")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("ID");

                    b.ToTable("Materias");
                });

            modelBuilder.Entity("Entities.Models.Status", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<int>("Codigo")
                        .HasColumnType("integer");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.ToTable("Status", (string)null);

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Codigo = 1,
                            Descripcion = "El requerimiento ha sido creado y espera ser procesado.",
                            Tipo = "Pendiente"
                        },
                        new
                        {
                            ID = 2,
                            Codigo = 2,
                            Descripcion = "El requerimiento ha sido tomado y se encuentra en proceso de ser gestionado.",
                            Tipo = "En proceso"
                        },
                        new
                        {
                            ID = 3,
                            Codigo = 3,
                            Descripcion = "El requerimiento ha sido procesado y completado.",
                            Tipo = "Completado"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Entities.Models.Clases", b =>
                {
                    b.HasOne("Entities.Models.Horarios", "Horario")
                        .WithMany()
                        .HasForeignKey("HorarioID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.Materias", "Materia")
                        .WithMany()
                        .HasForeignKey("MateriaID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Horario");

                    b.Navigation("Materia");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Entities.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Entities.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Entities.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
